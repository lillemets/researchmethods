makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,1))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.1))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.05))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.08))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.08))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
par(mfrow = 1:2)
plot(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Probability density function (PDF)")
plot(ecdf(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Cumulative distribution function (CDF)")
par(mfrow = 1:2)
plot(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Probability density function (PDF)")
plot(ecdf(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Cumulative distribution function (CDF)")
par(mfrow = 1:2, bty = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Probability density function (PDF)")
plot(ecdf(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Cumulative distribution function (CDF)")
plot(c(0, 100), 0:1, type = 'n', xlab = "Percent infected")
fus$y[fus$f39] %>% ecdf %>% lines(col = 'tomato')
fus$y[!fus$f39] %>% ecdf %>% lines(col = 'skyblue')
legend('topright', c("F39", "Others"), fill = c('tomato', 'skyblue'))
summary(ToothGrowth$len)
par(bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
fus$y[fus$f39] %>% ecdf %>% lines(col = 'tomato')
fus$y[!fus$f39] %>% ecdf %>% lines(col = 'skyblue')
legend('topright', c("F39", "Others"), fill = c('tomato', 'skyblue'))
par(bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
ToothGrowth$len[ToothGrowth$supp == 'VC'] %>% ecdf %>% lines(col = Col['red'])
ToothGrowth$len[ToothGrowth$supp == 'OJ'] %>% ecdf %>% lines(col = Col['blue'])
par(bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
ToothGrowth$len[ToothGrowth$supp == 'VC'] %>% ecdf %>% lines(col = Col['red'])
ToothGrowth$len[ToothGrowth$supp == 'OJ'] %>% ecdf %>% lines(col = Col['blue'])
Test <- ks.test(ToothGrowth$len[ToothGrowth$supp == 'VC'],
ToothGrowth$len[ToothGrowth$supp == 'OJ'])
Test
Value of test statistic is `r Test$statistic %>% round(3)`.
Test$statistic %>% round(3)
Test$p.value %>% round(3)
Test <- t.test(trees$Height, mu = 74)
Test
par(mar = c(4,0,0,0), bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
ToothGrowth$len[ToothGrowth$supp == 'VC'] %>% ecdf %>% lines(col = Col['red'])
ToothGrowth$len[ToothGrowth$supp == 'OJ'] %>% ecdf %>% lines(col = Col['blue'])
par(mar = c(4,2,0,0), bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
ToothGrowth$len[ToothGrowth$supp == 'VC'] %>% ecdf %>% lines(col = Col['red'])
ToothGrowth$len[ToothGrowth$supp == 'OJ'] %>% ecdf %>% lines(col = Col['blue'])
mtcars
model <- lm(mpg ~ wt, mtcars)
ls()
summary(model)
plot(model)
abline(model)
plot(mpg ~ wt, mtcars)
abline(model)
# Määra töökaust
setwd('/home/jrl/work/toidukadu/2020')
# Laadi pakid
library('magrittr')
# Laadi andmed
load('andmed/andmed.Rda')
vilDf <- readRDS('andmed/vesivil.Rds')
attach(vilDf)
tegevus <- attribute_2
küsitluses <- !is.na(kuipalju)
kaodVec <- c('veekogus', 'hoiustamine', 'eisobi')
etapidVil <- c('Veekogus', 'Hoiustamisel', 'Sorteerimisel')
alles <- apply(1 - vilDf[, kaodVec]/100, 1, prod)
kadu <- (1 - alles) * 100
## Funktsioon keskmise kujutamiseks histogrammil
Lisa <- function(x) {
abline(v = x, col = Värv[2])
text(x, 2, pos = 4, paste0(x %>% round(2), "%"),
col = Värv[2], xpd = T, cex = 1.4, family = 'RobotoCondensed')
}
## Funktsioon täppjoonise joonistamiseks
Täpp <- function(x) {
Väärtused <- vilDf[, grepl(paste0(x, '\\.'), names(vilDf)) &
!grepl('other', names(vilDf))] %>%
colMeans(na.rm = T)
Jrk <- order(Väärtused)
Valim <- vilDf[, grep(paste0(x, '\\.'), names(vilDf))[1]] %>%
na.omit %>% length
dev.off()
par(family = 'RobotoCondensed')
dotchart(Väärtused[Jrk] * 100,
labels = vastus$vil[grep(x, names(küsimus$vil))] %>%
unlist %>% `[`(Jrk),
xlim = c(0,100), frame.plot = F, pch = 19,
xlab = "Küsitletud kasvatuste osakaal, %",
main = paste0(küsimus$vil[x], " (n = ", Valim, ")"))
for (i in (1:length(Väärtused))) {
text(100, i,
(Väärtused[Jrk][i] * 100) %>% round %>% paste0("%"),
pos = 4, xpd = T)
}
dev.print(png, paste0('aruanne/vil_', x, '.png'),
width = 600, height = 300, pointsize = 12)
}
## Värvid
Värv <- c('#AEB6BF', '#B03A2E', '#34495E')
table(!duplicated(email.x) & !is.na(kuipalju))
table(tolower(valdkond), küsitluses)
table(tolower(tegevus), küsitluses)
length(unique(firstname))
## Kui suur osa püügist on kadu?
summary(kadu)
quantile(kadu, probs = seq(0,1,.1), na.rm = T)
### Joonis
par(family = 'RobotoCondensed')
## Milline on põhjuste sagedus?
Väärtused <- vilDf[, grepl('miks', names(vilDf)) &
!grepl('other', names(vilDf))] %>%
colMeans(na.rm = T)
Väärtused
Grupid <- rep(küsimus$vil[grep('miks', names(küsimus$vil))],
times = sapply(vastus$vil[grep('miks', names(küsimus$vil))], length))
dev.off()
par(family = 'RobotoCondensed')
dotchart(Väärtused * 100,
labels = vastus$vil[grep('miks', names(küsimus$vil))] %>% unlist,
groups = factor(Grupid, levels = unique(Grupid)),
main = paste("Kao põhjused etappides", "(n = ", sum(küsitluses), ")"),
xlim = c(0,100), frame.plot = F, pch = 19,
xlab = "Küsitletud kasvatuste osakaal, %")
Väärtused
Väärtused
Grupid
groups = factor(Grupid, levels = unique(Grupid))
factor(Grupid, levels = unique(Grupid))
vastus$vil[grep('miks', names(küsimus$vil))] %>% unlist
Väärtused
cbind(vastus$vil[grep('miks', names(küsimus$vil))] %>% unlist,Väärtused)
cbind(vastus$vil[grep('miks', names(küsimus$vil))] %>% unlist,Väärtused)
vastus$vil[grep('miks', names(küsimus$vil))] %>% unlist
cbind(vastus$vil[grep('miks', names(küsimus$vil))] %>% unlist,Väärtused)
väärtused
Väärtused
cbind(vastus$vil[grep('miks', names(küsimus$vil))] %>% unlist,Väärtused) %>% unname
cbind(vastus$vil[grep('miks', names(küsimus$vil))] %>% unlist,Väärtused) %>% unname
#? Created on 2020-05-21 18:29:31 by Jüri Lillemets with R version 4.0.0 (2020-04-24).
#? This script ...
# Set options
#options(device = 'X11')
# Set working directory
setwd('/home/jrl/work/bb4v/clustering')
#setwd('C:/Users/lillemets/Google Drive/')
# Load packages
library('magrittr')
library('openxlsx')
library('RColorBrewer');library('wordcloud');library('snakecase')
# Load data
load('/home/jrl/work/bb4v/clustering/data.Rda')
# Divide cases into clusters (2020-05-21 18:31:26) ----------
## Name clusters
clNames <- c('Bio-based Fertilizer for Increased Soil Quality',
'Heat and Fuel from Woody Biomass',
'Sustainable Bio-based Products from Plant-based Biomass',
'High-value Products from Knowledge-based Processing ',
'Fuel and Electricity from Biogas',
'District Heating and Electricity from Various Biomass Sources',
'Sustainable and Novel Bio-based Products from Waste',
'Circular Bioeconomy in Agricultural Production ',
'Specialized Heat and Electricity Production and Services ',
'High-value Products from Circular Bioeconomy ',
'Innovation in Novel Fuels and Bio-chemicals ',
'Utilization of Municipal Waste and Sewage')
#cbind(cDf$case)
caseCl <- read.table(sep = ';', head = T, stringsAsFactors = F, text = '
case;cluster
Eesti Jäätmeringluse;1
Rohegaas OÜ;12
Lilli Agro OÜ;3
EstAgar AS;4
Lihula Soojus OÜ;2
Biometaan OÜ;5
Ecopellet OÜ;2
Tartu Biogaas OÜ;5
Landwirtschaftsbetrieb Grevesmühle e.G.;6
Spoontainable;7
Hiss Reet;7
Aloja Starkelsen;3
Egg Energy LTD;8
AS Ziedi JP;8
SIA Getliņi EKO;12
JSC Agrofirma Tērve;8
Agro Iecava;8
Fortum Jelgava;9
Roquette Amilina;3
Satimed;4
Agrar-Energie-Obernhausen;6
BioLNG in Lower Saxony;6
3B Bioenergie;6
EFC Farmsystems;10
oceanBASIS;4
Emsland Group;10
Project terraBoGa;1
Coffee cups from seaweed;7
Kaffeeform;7
Södra;3
Sunpine;11
Wapnö Farm;8
Energifabriken;8
The Loop Factory;7
Alvesta Biogas;5
RenFuel;11
Växtproteinfabriken;11
Pageldynių plantacija UAB;12
Danpower Baltic UAB;9
Opplandske Bioenergi AS;9
Hallingdal Trepellets AS;2
Borregaard;10
Norske skog Saugbrugs;3
Høst;1
StandardBio;1
Statkraft Varme in Ås;2
Orkla Trebrensel AS;2
Mowi;10
Greve Biogass AS;12
ChemProf Doradztwo Chemiczne s.c.;4
Miejskie Przedsiębiorstwo Energetyki Cieplnej Sp. z o.o.;9
Ośrodek Hodowli Zarodowej "Gajewo" Sp. z o.o.;5
Przedsiębiorstwo Energetyki Cieplnej Sp. z o.o. w Piszu;9
Zakład Gospodarki Komunalnej w Łukcie Spółka z o.o.;9
Quercus Sp. z o.o.;2
Zakład Produkcyjno-Doświadczalny Łężany Sp. z o.o.;8
Przedsiębiorstwo Przemysłu Drzewnego PPD Sp. z o.o.;2
Modus Energy Solutions;9
UAB Kurana;6
')
# Check
cbind(cDf$case, caseCl$case)
## Reorder
Ordering <- c(7,1,9,10,2,3,9,6,4,11,5,12)
caseCl$cluster <- match(caseCl$cluster, order(Ordering))
clNames <- clNames[order(Ordering)]
## Add sequence numbers
clNames <- ifelse(nchar(as.character(1:12)) == 1, paste0(0,1:12), 1:12) %>%
paste0(". ", clNames)
clustDf <- lapply(cDf[, Vars$name], function(x) tapply(x, caseCl$cluster, mean) %>%
round(2)) %>% data.frame
## Add pseudonym
cDf <- data.frame(cDf[, 1:2],
pseudonym = paste0(caseCl$cluster,
LETTERS[ave(caseCl$cluster, caseCl$cluster, FUN = seq_along)]),
cDf[, 3:ncol(cDf)])
## Add cluster number
cDf$cluster <- clNames[caseCl$cluster]
par(mfrow = c(3,4), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
#? Created on 2020-07-30 09:47:24 by Jüri Lillemets with R version 4.0.2 (2020-06-22).
#? This script ...
# Set options
#options(device = 'X11')
# Set working directory
setwd('/home/jrl/work/bb4v/clustering')
# Load packages
library('magrittr')
library('fmsb');library('RColorBrewer')
# Read data fix (2020-07-30 10:02:37) ----------
## Read attributes
load('/home/jrl/work/bb4v/clustering/data.Rda')
## Read data
Oie <- readRDS('clusters.Rds')
## Add lines to cluster names
addLineBreak <- function(x, width = 36) strwrap(x, width = width) %>%
paste(collapse = '\n')
Oie$cluster %<>% sapply(addLineBreak)
# Draw (2020-07-30 12:07:20) ----------
## Aggregate cases to clusters
Nei <- aggregate(Oie[, Vars$name], list(cluster = Oie$cluster), mean)
## Set colors
Colors <- brewer.pal(6, 'Spectral') %>% rev
## Matrix
for (j in unique(Vars$type)) {
par(mar = c(17,20,2,4), family = 'RobotoCondensed')
Nei[, Vars$name[Vars$type == j]] %>% as.matrix %>% t %>% image(col = Colors, axes = F, main = j)
axis(1, at = seq(0,1,1/(length(Vars$name[Vars$type == j])-1)),
labels = Vars$label[Vars$type == j], cex.axis = 1.2, las = 2)
axis(2, at = seq(0,1,1/(length(unique(Oie$cluster))-1)),
labels = Oie$cluster %>% unique %>% sort, cex.axis = 1.2, las = 2)
legend('right', legend = 0:5, cex = 1, fill = Colors, xpd = T, inset = c(-.08,0))
dev.print(png, paste0("heatmaps/", gsub("[[:punct:]]| ", "_", j), ".png"), width = 900, height = 600)
}
## Radial charts
### Add max-min
radNei <- rbind(rep(5, ncol(Nei)) , rep(0, ncol(Nei)) , Nei)
### Inputs
for (j in unique(Vars$type)) {
par(mfrow = c(3,4), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
for (i in 1:nrow(Nei)) {
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
}
dev.print(png, paste0("radars/wide_", gsub("[[:punct:]]| ", "_", j), ".png"), width = 1000, height = 1500)
}
par(mfrow = c(3,4), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
## Radial charts
### Add max-min
radNei <- rbind(rep(5, ncol(Nei)) , rep(0, ncol(Nei)) , Nei)
### Inputs
for (j in unique(Vars$type)) {
par(mfrow = c(3,4), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
for (i in 1:nrow(Nei)) {
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
}
dev.print(png, paste0("radars/wide_", gsub("[[:punct:]]| ", "_", j), ".png"), width = 1000, height = 1500)
}
## Radial charts
### Add max-min
radNei <- rbind(rep(5, ncol(Nei)) , rep(0, ncol(Nei)) , Nei)
### Inputs
for (j in unique(Vars$type)) {
par(mfrow = c(3,4), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
for (i in 1:nrow(Nei)) {
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
}
dev.print(png, paste0("radars/wide_", gsub("[[:punct:]]| ", "_", j), ".png"), width = 1500, height = 1000)
}
for (j in unique(Vars$type)) {
par(mfrow = c(3,4), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
for (i in 1:nrow(Nei)) {
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
}
dev.print(png, paste0("radars/wide_", gsub("[[:punct:]]| ", "_", j), ".png"), width = 1500, height = 1200)
}
### Inputs
for (j in unique(Vars$type)) {
par(mfrow = c(3,4), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
for (i in 1:nrow(Nei)) {
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
}
dev.print(png, paste0("radars/wide_", gsub("[[:punct:]]| ", "_", j), ".png"), width = 1000, height = 1500)
}
### Inputs
for (j in unique(Vars$type)) {
par(mfrow = c(4,3), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
for (i in 1:nrow(Nei)) {
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
}
dev.print(png, paste0("radars/wide_", gsub("[[:punct:]]| ", "_", j), ".png"), width = 1500, height = 1200)
}
#? Created on 2020-07-30 09:47:24 by Jüri Lillemets with R version 4.0.2 (2020-06-22).
#? This script ...
# Set options
#options(device = 'X11')
# Set working directory
setwd('/home/jrl/work/bb4v/clustering')
# Load packages
library('magrittr')
library('fmsb');library('RColorBrewer')
# Read data fix (2020-07-30 10:02:37) ----------
## Read attributes
load('/home/jrl/work/bb4v/clustering/data.Rda')
## Read data
Oie <- readRDS('clusters.Rds')
## Add lines to cluster names
addLineBreak <- function(x, width = 36) strwrap(x, width = width) %>%
paste(collapse = '\n')
Oie$cluster %<>% sapply(addLineBreak)
# Draw (2020-07-30 12:07:20) ----------
## Aggregate cases to clusters
Nei <- aggregate(Oie[, Vars$name], list(cluster = Oie$cluster), mean)
## Set colors
Colors <- brewer.pal(6, 'Spectral') %>% rev
## Matrix
for (j in unique(Vars$type)) {
par(mar = c(17,20,2,4), family = 'RobotoCondensed')
Nei[, Vars$name[Vars$type == j]] %>% as.matrix %>% t %>% image(col = Colors, axes = F, main = j)
axis(1, at = seq(0,1,1/(length(Vars$name[Vars$type == j])-1)),
labels = Vars$label[Vars$type == j], cex.axis = 1.2, las = 2)
axis(2, at = seq(0,1,1/(length(unique(Oie$cluster))-1)),
labels = Oie$cluster %>% unique %>% sort, cex.axis = 1.2, las = 2)
legend('right', legend = 0:5, cex = 1, fill = Colors, xpd = T, inset = c(-.08,0))
dev.print(png, paste0("heatmaps/", gsub("[[:punct:]]| ", "_", j), ".png"), width = 900, height = 600)
}
## Radial charts
### Add max-min
radNei <- rbind(rep(5, ncol(Nei)) , rep(0, ncol(Nei)) , Nei)
### Inputs
for (j in unique(Vars$type)) {
par(mfrow = c(4,3), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
for (i in 1:nrow(Nei)) {
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
}
dev.print(png, paste0("radars/wide_", gsub("[[:punct:]]| ", "_", j), ".png"), width = 1500, height = 1200)
}
### Inputs
for (j in unique(Vars$type)) {
par(mfrow = c(3,4), xpd = TRUE, mar = c(0,3,4,2), family = 'RobotoCondensed', cex = 1.4)
for (i in 1:nrow(Nei)) {
radarchart(radNei[c(1:2, i+2), Vars$name[Vars$type == j]],
seg = 5,
pty = '.',
plty = 'solid', plwd = .5, pfcol = adjustcolor(brewer.pal(12, 'Set3')[i], alpha.f = .5),
cglwd = .5, cglty = 'solid', cglcol = 'gray',
title = Nei[, 'cluster'][i],
vlabels = Vars$label[Vars$type == j] %>% sapply(addLineBreak, width = 16), vlcex = .8,
axistype = 1, caxislabels = 0:5, calcex = .8, axislabcol = 'gray')
}
dev.print(png, paste0("radars/wide_", gsub("[[:punct:]]| ", "_", j), ".png"), width = 1500, height = 1200)
}
mm <- read.csv('/home/jrl/work/resmeth/site/data/mm.csv')
