main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
shapiro.test(ChickWeight$weight[ChickWeight$Time == 6])
shapiro.test(ChickWeight$weight[ChickWeight$Time == 8])
shapiro.test(ChickWeight$weight[ChickWeight$Time == 20])
hist(ChickWeight$weight[ChickWeight$Time == 20])
hist(ChickWeight$weight[ChickWeight$Time == 0])
hist(ChickWeight$weight[ChickWeight$Time == 2])
hist(ChickWeight$weight[ChickWeight$Time == 4])
boxplot(weight ~ time, ChickWeight)
boxplot(weight ~ Time, ChickWeight)
boxplot(weight ~ Time + Diet, ChickWeight)
hist(ChickWeight$weight[ChickWeight$Time == 2 & ChickWeight$Time == 20])
ChickWeight$weight[ChickWeight$Time == 2 & ChickWeight$Time == 20]
ChickWeight$weight[ChickWeight$Diet == 2 & ChickWeight$Time == 20]
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 2 & ChickWeight$Time == 20])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 20])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 21])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 10])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 2 & ChickWeight$Time == 10])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 1 & ChickWeight$Time == 10])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 2 & ChickWeight$Time == 10])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 3 & ChickWeight$Time == 10])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 2 & ChickWeight$Time == 10])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 10])
table(ChickWeight$Time)
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 18])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 14])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 10])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 12])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 8])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 2 & ChickWeight$Time == 8])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 2 & ChickWeight$Time == 6])
shapiro.test(ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 6])
ChickWeight$weight[ChickWeight$Diet == 4 & ChickWeight$Time == 6]
# Settings
knitr::opts_chunk$set(echo = F, dpi = 150, fig.height = 4)
# Load packages
library('magrittr');library('knitr')
# Set colors
Col <- c(red = '#e6457a', green = '#b0e645', blue = '#45cbe6')
par(bty = 'n', family = 'RobotoCondensed')
curve(dwilcox(x,
length(warpbreaks$breaks[warpbreaks$wool == 'A']),
length(warpbreaks$breaks[warpbreaks$wool == 'B'])),
-3, 3,
main = "Wilcoxon distribution (m = 27, n = 27)", xlab = "Test statistic", ylab = "Density")
abline(v = c(-Test$statistic, Test$statistic), col = Col['red']) # Empirical
abline(v = c(-1.97, 1.97), col = Col['blue']) # Critical
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeighsrtarstarstartt$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeighs$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
fus <- agridat::snijders.fusarium
fusWSR <- spread(fus[fus$year %in% 1987:1988, ], year, y, sep = '.')
fusWSR <- fusWSR[1:12, ]
library('dplyr')
fusWSR <- spread(fus[fus$year %in% 1987:1988, ], year, y, sep = '.')
library('tidy')
install.packages('tidy')
library('tidyr')
fusWSR <- spread(fus[fus$year %in% 1987:1988, ], year, y, sep = '.')
fusWSR <- fusWSR[1:12, ]
fusWSR$diff <- fusWSR$year.1987 - fusWSR$year.1988
fusWSR$abs.diff <- abs(fusWSR$diff)
fusWSR$rank <- rank(fusWSR$abs.diff)
fusWSR$sign <- sign(fusWSR$diff)
fusWSR[-3]
aggregate(rank ~ sign, fusWSR, sum)
wilcox.test(fusWSR$year.1987, fusWSR$year.1988, paired = T)
par(mfrow = 1:2)
plot(density(fus$y), main = "Probability density function (PDF)")
plot(ecdf(fus$y), main = "Cumulative distribution function (CDF)")
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '')
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,.1))
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,.1))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,.3))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,.2))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
ChickWeight$weight[ChickWeight$Time == 2]
ChickWeight$weight[ChickWeight$Time == 4]
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of the chick, gm", ylab = '',
ylim = c(0,.2))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
?ChickWeight
Test <- wilcox.test(breaks ~ wool, warpbreaks, paired = T)
?wilcox.test
Test <- wilcox.test(ChickWeight$weight[ChickWeight$Time == 2],
ChickWeight$weight[ChickWeight$Time == 4], paired = T)
ChickWeight$weight[ChickWeight$Time == 2]
ChickWeight[ChickWeight$Time == 2]
ChickWeight[ChickWeight$Time == 2, ]
length(ChickWeight$weight[ChickWeight$Time == 2])
length(ChickWeight$weight[ChickWeight$Time == 4])
ChickWeight[ChickWeight$Time == 4, ]
table(ChickWeight$chick)
table(ChickWeight$Chick)
table(ChickWeight$Chick) > 12
table(ChickWeight$Chick) 11 12
table(ChickWeight$Chick) == 12
ChickWeight <- ChickWeight[table(ChickWeight$Chick) == 12, ]
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of a chick, g", ylab = '',
ylim = c(0,.2))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
Test <- wilcox.test(ChickWeight$weight[ChickWeight$Time == 2],
ChickWeight$weight[ChickWeight$Time == 4], paired = T)
length(ChickWeight$weight[ChickWeight$Time == 2])
length(ChickWeight$weight[ChickWeight$Time == 4])
intersect(ChickWeight$Chick[ChickWeight$Time == 2], ChickWeight$Chick[ChickWeight$Time == 4])
ChickWeight <- ChickWeight[ChickWeight$Chick) %in%
intersect(ChickWeight$Chick[ChickWeight$Time == 2],
ChickWeight$Chick[ChickWeight$Time == 4]), ]
ChickWeight$Chick) %in%
intersect(ChickWeight$Chick[ChickWeight$Time == 2],
ChickWeight$Chick[ChickWeight$Time == 4])
ChickWeight <- ChickWeight[ChickWeight$Chick) %in%
intersect(ChickWeight$Chick[ChickWeight$Time == 2],
ChickWeight$Chick[ChickWeight$Time == 4]), ]
ChickWeight <- ChickWeight[ChickWeight$Chick %in%
intersect(ChickWeight$Chick[ChickWeight$Time == 2],
ChickWeight$Chick[ChickWeight$Time == 4]), ]
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ChickWeight$weight[ChickWeight$Time <= 4]), type = 'n',
main = NA, xlab = "Weight of a chick, g", ylab = '',
ylim = c(0,.2))
lines(density(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
lines(density(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
}
makePlot()
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 2]), col = Col['red'])
abline(v = mean(ChickWeight$weight[ChickWeight$Time == 4]), col = Col['blue'])
Test <- wilcox.test(ChickWeight$weight[ChickWeight$Time == 2],
ChickWeight$weight[ChickWeight$Time == 4], paired = T)
Test
par(bty = 'n', family = 'RobotoCondensed')
curve(dwilcox(x,
length(warpbreaks$breaks[warpbreaks$wool == 'A']),
length(warpbreaks$breaks[warpbreaks$wool == 'B'])),
-3, 3,
main = "Wilcoxon distribution (m = 27, n = 27)", xlab = "Test statistic", ylab = "Density")
abline(v = c(-Test$statistic, Test$statistic), col = Col['red']) # Empirical
abline(v = c(-1.97, 1.97), col = Col['blue']) # Critical
# Settings
knitr::opts_chunk$set(echo = F, dpi = 150, fig.height = 4)
# Load packages
library('magrittr');library('knitr')
# Set colors
Col <- c(red = '#e6457a', green = '#b0e645', blue = '#45cbe6')
Test$p.value %>% round(3)
par(bty = 'n', family = 'RobotoCondensed')
curve(dwilcox(x,
length(warpbreaks$breaks[warpbreaks$wool == 'A']),
length(warpbreaks$breaks[warpbreaks$wool == 'B'])),
-3, 3,
main = "Wilcoxon distribution (m = 27, n = 27)", xlab = "Test statistic", ylab = "Density")
abline(v = c(-Test$statistic, Test$statistic), col = Col['red']) # Empirical
abline(v = c(-1.97, 1.97), col = Col['blue']) # Critical
length(warpbreaks$breaks[warpbreaks$wool == 'A']
)
par(bty = 'n', family = 'RobotoCondensed')
curve(dwilcox(x,
length(ChickWeight$weight[ChickWeight$Time == 2]),
length(ChickWeight$weight[ChickWeight$Time == 4])),
-3, 3,
main = "Wilcoxon distribution (m = 27, n = 27)", xlab = "Test statistic", ylab = "Density")
abline(v = c(-Test$statistic, Test$statistic), col = Col['red']) # Empirical
abline(v = c(-1.97, 1.97), col = Col['blue']) # Critical
length(ChickWeight$weight[ChickWeight$Time == 2])
par(bty = 'n', family = 'RobotoCondensed')
curve(dwilcox(x,
length(ChickWeight$weight[ChickWeight$Time == 2]),
length(ChickWeight$weight[ChickWeight$Time == 4])),
-1, 1,
main = "Wilcoxon distribution (m = 41, n = 41)", xlab = "Test statistic", ylab = "Density")
abline(v = c(-Test$statistic, Test$statistic), col = Col['red']) # Empirical
abline(v = c(-1.97, 1.97), col = Col['blue']) # Critical
?wilcox
?dwilcox
Test
str(Test)
par(bty = 'n', family = 'RobotoCondensed')
curve(dwilcox(x,
length(ChickWeight$weight[ChickWeight$Time == 2]),
length(ChickWeight$weight[ChickWeight$Time == 4])),
-1, 1,
main = "Wilcoxon distribution (m = 41, n = 41)", xlab = "Test statistic", ylab = "Density")
abline(v = c(-Test$statistic, Test$statistic), col = Col['red']) # Empirical
abline(v = c(-1.97, 1.97), col = Col['blue']) # Critical
par(bty = 'n', family = 'RobotoCondensed')
curve(dwilcox(x,
length(ChickWeight$weight[ChickWeight$Time == 2]),
length(ChickWeight$weight[ChickWeight$Time == 4])),
-.1, .1,
main = "Wilcoxon distribution (m = 41, n = 41)", xlab = "Test statistic", ylab = "Density")
abline(v = c(-Test$statistic, Test$statistic), col = Col['red']) # Empirical
abline(v = c(-1.97, 1.97), col = Col['blue']) # Critical
curve(dwilcox(x,
length(ChickWeight$weight[ChickWeight$Time == 2]),
length(ChickWeight$weight[ChickWeight$Time == 4])),
-.1, .1)
curve(dwilcox(x, 1, 1), -.1, .1)
curve(dwilcox(x, 100, 100), -.1, .1)
curve(dwilcox(x, 100), -.1, .1)
curve(dwilcox(x, 100, 100), -.001, .001)
curve(dwilcox(x, 100, 1e6), -.001, .001)
curve(dwilcox(x, 100, 1e6), -., .001)
curve(dwilcox(x, 100, 1e6), -1, 1)
curve(dwilcox(x, 100, 1e3), -1, 1)
curve(dwilcox(x, 100, 1e4), -1, 1)
curve(dwilcox(x, 100, 1e5), -1, 1)
par(mfrow = 1:2)
plot(density(fus$y), main = "Probability density function (PDF)")
plot(ecdf(fus$y), main = "Cumulative distribution function (CDF)")
Test$p.value %>% round(3)
data()
Seatbelts
Titanic
ToothGrowth
ToothGrowth$len
ks.test(len ~ supp, ToothGrowth)
ks.test
?ks.test
ToothGrowth$len[ToothGrowth$supp]
ToothGrowth$len[ToothGrowth$supp == 1]
ToothGrowth$len[ToothGrowth$supp == 'VC']
shapiro.test(ToothGrowth$len[ToothGrowth$supp == 'VC'])
shapiro.test(ToothGrowth$len[ToothGrowth$supp == 'OJ'])
hist(ToothGrowth$len[ToothGrowth$supp == 'OJ'])
hist(ToothGrowth$len[ToothGrowth$supp == 'VC'])
?ToothGrowth
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(iris$Petal.Length), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,1))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(iris$Petal.Length), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.1))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.1))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.5))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,1))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.1))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.05))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.08))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
makePlot <- function() {
par(mar = c(4,0,0,0), bty = 'n', yaxt = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len), type = 'n',
main = NA, xlab = 'Tooth length, ?', ylab = '',
ylim = c(0,.08))
lines(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
lines(density(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
}
makePlot()
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'VC']), col = Col['red'])
abline(v = mean(ToothGrowth$len[ToothGrowth$supp == 'OJ']), col = Col['blue'])
par(mfrow = 1:2)
plot(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Probability density function (PDF)")
plot(ecdf(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Cumulative distribution function (CDF)")
par(mfrow = 1:2)
plot(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Probability density function (PDF)")
plot(ecdf(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Cumulative distribution function (CDF)")
par(mfrow = 1:2, bty = 'n', family = 'RobotoCondensed')
plot(density(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Probability density function (PDF)")
plot(ecdf(ToothGrowth$len[ToothGrowth$supp == 'VC']), main = "Cumulative distribution function (CDF)")
plot(c(0, 100), 0:1, type = 'n', xlab = "Percent infected")
fus$y[fus$f39] %>% ecdf %>% lines(col = 'tomato')
fus$y[!fus$f39] %>% ecdf %>% lines(col = 'skyblue')
legend('topright', c("F39", "Others"), fill = c('tomato', 'skyblue'))
summary(ToothGrowth$len)
par(bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
fus$y[fus$f39] %>% ecdf %>% lines(col = 'tomato')
fus$y[!fus$f39] %>% ecdf %>% lines(col = 'skyblue')
legend('topright', c("F39", "Others"), fill = c('tomato', 'skyblue'))
par(bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
ToothGrowth$len[ToothGrowth$supp == 'VC'] %>% ecdf %>% lines(col = Col['red'])
ToothGrowth$len[ToothGrowth$supp == 'OJ'] %>% ecdf %>% lines(col = Col['blue'])
par(bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
ToothGrowth$len[ToothGrowth$supp == 'VC'] %>% ecdf %>% lines(col = Col['red'])
ToothGrowth$len[ToothGrowth$supp == 'OJ'] %>% ecdf %>% lines(col = Col['blue'])
Test <- ks.test(ToothGrowth$len[ToothGrowth$supp == 'VC'],
ToothGrowth$len[ToothGrowth$supp == 'OJ'])
Test
Value of test statistic is `r Test$statistic %>% round(3)`.
Test$statistic %>% round(3)
Test$p.value %>% round(3)
Test <- t.test(trees$Height, mu = 74)
Test
par(mar = c(4,0,0,0), bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
ToothGrowth$len[ToothGrowth$supp == 'VC'] %>% ecdf %>% lines(col = Col['red'])
ToothGrowth$len[ToothGrowth$supp == 'OJ'] %>% ecdf %>% lines(col = Col['blue'])
par(mar = c(4,2,0,0), bty = 'n', family = 'RobotoCondensed')
plot(c(0, 40), 0:1, type = 'n', xlab = "Percent infected")
ToothGrowth$len[ToothGrowth$supp == 'VC'] %>% ecdf %>% lines(col = Col['red'])
ToothGrowth$len[ToothGrowth$supp == 'OJ'] %>% ecdf %>% lines(col = Col['blue'])
mtcars
model <- lm(mpg ~ wt, mtcars)
ls()
summary(model)
plot(model)
abline(model)
plot(mpg ~ wt, mtcars)
abline(model)
