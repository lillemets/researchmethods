hist(log(mtcars$mpg))
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10)
hist(log(mtcars$mpg), 10)
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, fill = NA)
hist(log(mtcars$mpg), 10)
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, fill = NULL)
hist(log(mtcars$mpg), 10)
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, fill = 'white')
hist(log(mtcars$mpg), 10)
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, col = 'white')
hist(log(mtcars$mpg), 10)
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, col = Col['red'])
hist(log(mtcars$mpg), 10)
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, col = Col['red'])
hist(log(mtcars$mpg), 10, col = Col['blue'])
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 12, col = Col['red'])
hist(log(mtcars$mpg), 12, col = Col['blue'])
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 12, col = Col['red'])
hist(log(mtcars$mpg), 20, col = Col['blue'])
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, col = Col['red'])
hist(log(mtcars$mpg), 10, col = Col['blue'])
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, col = Col['red'])
hist(log(mtcars$mpg), 10, col = Col['blue'])
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10, col = Col['green'])
hist(log(mtcars$mpg), 10, col = Col['blue'])
Params();par(mfrow = 1:2)
hist(mtcars$mpg, 10)
hist(log(mtcars$mpg), 10)
Params();par(mfrow = 1:4)
hist(mtcars$mpg, 10)
hist(log(mtcars$mpg), 10)
qqnorm(mtcars$mpg)
Params();par(mfrow = c(1,4))
hist(mtcars$mpg, 10)
hist(log(mtcars$mpg), 10)
qqnorm(mtcars$mpg)
Params();par(mfrow = c(2,2))
hist(mtcars$mpg, 10)
hist(log(mtcars$mpg), 10)
qqnorm(mtcars$mpg)
Params();par(mfrow = c(2,2))
hist(mtcars$mpg, 10)
hist(log(mtcars$mpg), 10)
qqnorm(mtcars$mpg)
qqnorm(log(mtcars$mpg))
Params();par(mfrow = c(2,2))
hist(mtcars$mpg, 10)
hist(log(mtcars$mpg), 10)
qqnorm(mtcars$mpg);abline(0,1)
qqnorm(log(mtcars$mpg))
?qqnorm
Params();par(mfrow = c(2,2))
hist(mtcars$hp, 10)
hist(log(mtcars$hp), 10)
qqnorm(mtcars$hp)
qqnorm(log(mtcars$hp))
Params();par(mfrow = c(2,2))
hist(mtcars$hp, 29)
hist(log(mtcars$hp), 10)
qqnorm(mtcars$hp)
qqnorm(log(mtcars$hp))
Params();par(mfrow = c(2,2))
hist(mtcars$hp, 20)
hist(log(mtcars$hp), 10)
qqnorm(mtcars$hp)
qqnorm(log(mtcars$hp))
Params();par(mfrow = c(2,2))
hist(mtcars$hp, 20)
hist(log(mtcars$hp), 20)
qqnorm(mtcars$hp)
qqnorm(log(mtcars$hp))
Params();par(mfrow = c(2,2))
hist(mtcars$hp, 10)
hist(log(mtcars$hp), 10)
qqnorm(mtcars$hp)
qqnorm(log(mtcars$hp))
Params();par(mfrow = c(1:3))
plot(Formula, mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon")
Params();par(mfrow = c(1:3))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
plot(log(mpg) ~ hp, mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon")
plot(mpg ~ log(hp), mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon (log-transformed)")
plot(log(mpg) ~ log(hp), mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon (log-transformed)")
Params();par(mfrow = c(2:2))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
plot(log(mpg) ~ hp, mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon")
plot(mpg ~ log(hp), mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon (log-transformed)")
plot(log(mpg) ~ log(hp), mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon (log-transformed)")
Params();par(mfrow = c(2,2))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
plot(log(mpg) ~ hp, mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon")
plot(mpg ~ log(hp), mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon (log-transformed)")
plot(log(mpg) ~ log(hp), mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon (log-transformed)")
Params();par(mfrow = c(2,2))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
plot(log(mpg) ~ hp, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon (log-transformed)")
plot(mpg ~ log(hp), mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon")
plot(log(mpg) ~ log(hp), mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon (log-transformed)")
plot(disp ~ wt, mtcars)
curve(predict(lm(disp ~ wt + I(wt^2) + I(wt^3), mtcars), data.frame(wt = x)), 0, 6, add = T)
curve(predict(modLinLog, data.frame(hp = x)),
min(log(mtcars$hp)), max(log(mtcars$hp)), add = T, col = Col['red'])
Formula <- log(mpg) ~ log(hp)
Model <- lm(Formula, mtcars)
summary(Model)
Params(); par(mar = c(4,4,0,0))
plot(Formula, mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon (log-transformed)")
abline(Model, col = Col['red'])
plot(disp ~ wt, mtcars)
Params(); par(mar = c(4,4,0,0))
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
abline(Model, col = Col['red'])
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Formula <- log(mpg) ~ hp
Model <- lm(Formula, mtcars)
summary(Model)
Formula <- mpg ~ hp + I(hp^2)
Model <- lm(Formula, mtcars)
summary(Model)
Params(); par(mar = c(4,4,0,0))
plot(Formula, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon (log-transformed)")
Params(); par(mar = c(4,4,0,0))
plot(Formula, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0))
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Formula <- mpg ~ hp + I(hp^2)
Model <- lm(Formula, mtcars)
summary(Model)
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Formula <- mpg ~ hp + I(hp^2)
Model <- lm(Formula, mtcars)
summary(Model)
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
abline(Model, col = Col['red'])
Model$coef[1]
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
abline(Model, col = Col['red'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
abline(Model$coef[[1]], Model$coef[[3]], col = Col['red'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
abline(Model$coef[[1]], Model$coef[[3]], col = Col['red'])
Model$coef[[1]]
Model$coef[[2]]
?plot.lm
?plot.formula
?abline
abline(Model$coef[[1]], Model$coef[[2]], col = Col['red'])
abline(Model$coef[[1]], Model$coef[[3]], col = Col['red'])
Model$coef[[3]]
Model
summary(Model)
Params();par(mfrow = 1:2)
plot(Model, 1:2
Params();par(mfrow = 1:2)
plot(Model, 1:2)
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon")
curve(predict(Model, list(hp = x)), min(mtcars$hp), max(mtcars$hp))
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon")
curve(predict(Model, list(hp = x)), min(mtcars$hp), max(mtcars$hp),
add = T, col = Col['red'])
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon")
curve(predict(Model, list(hp = x)), min(mtcars$hp), max(mtcars$hp),
add = T, col = Col['red'])
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
Formula <- mpg ~ hp + I(hp^2)
Model <- lm(Formula, mtcars)
summary(Model)
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon")
curve(predict(Model, list(hp = x)), min(mtcars$hp), max(mtcars$hp),
add = T, col = Col['red'])
pairs(mtcars)
pairs(mtcars)
plot(disp ~ wt, mtcars)
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars)
?mtcars
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
Formula <- disp ~ wt + I(wt^2) + I(wt^3)
Model <- lm(Formula, mtcars)
summary(Model)
Formula <- disp ~ wt + I(wt^2) + I(wt^3)
Model <- lm(Formula, mtcars)
summary(Model)
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(hp = x)), min(mtcars$hp), max(mtcars$hp),
add = T, col = Col['red'])
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
Formula <- disp ~ wt + I(wt^2) + I(wt^3)
Model <- lm(Formula, mtcars)
summary(Model)
Params();par(mfrow = 1:2)
plot(Model, 1:2)
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
plot(Model, 1:2
```
---
## Linear-log
When one or more predictors are used in logged form, then the model is referred to as a linear-log model:
$$Y = \alpha + \beta ln(x) + \varepsilon$$
---
$$\text{mpg} = \alpha + \beta \text{ln(hp)} + \varepsilon$$
``` {r}
Formula <- mpg ~ log(hp)
Model <- lm(Formula, mtcars)
summary(Model)
```
``` {r}
Params(); par(mar = c(4,4,0,0))
plot(Formula, mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon")
abline(Model, col = Col['red'])
```
---
Interpretation:
$mpg_{i} = `r modLinLog$coef[[1]]` + `r modLinLog$coef[[2]]` * ln(hp_{i}) + \varepsilon_{i}$
When `hp` increases by 1 per cent, `mpg` increases by `r modLinLog$coef[[2]]` / 100 = **`r modLinLog$coef[[2]] / 100`** units.
---
Diagnostics
``` {r}
Params();par(mfrow = 1:2)
plot(Model, 1:2)
```
---
## Log-log
When either of the previous transformations have not improved the fit of a linear model, we can also transform both response and predictor(s) as follows:
$$ln(y) = \alpha + \beta ln(x) + \varepsilon$$
---
$$\text{ln(mpg)} = \alpha + \beta \text{ln(hp)} + \varepsilon$$
``` {r}
Formula <- log(mpg) ~ log(hp)
Model <- lm(Formula, mtcars)
summary(Model)
```
``` {r}
Params(); par(mar = c(4,4,0,0))
plot(Formula, mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon (log-transformed)")
abline(Model, col = Col['red'])
```
---
Interpretation:
$ln(mpg_{i}) = `r Model$coef[[1]]` + `r Model$coef[[2]]` * ln(hp_{i}) + \varepsilon_{i}$
When `hp` increases by 1 per cent, `mpg` increases by **`r Model$coef[[2]]`** percent.
---
Diagnostics
``` {r}
Params();par(mfrow = 1:2)
plot(Model, 1:2)
```
---
Why did linear-log and log-log transformations improve the fit?
``` {r}
Params();par(mfrow = c(2,2))
hist(mtcars$hp, 10)
hist(log(mtcars$hp), 10)
qqnorm(mtcars$hp)
qqnorm(log(mtcars$hp))
```
--
We should apply log-transformatins to variables that are  that are log-normally distributed.
---
``` {r}
Params();par(mfrow = c(2,2))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
plot(log(mpg) ~ hp, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon (log-transformed)")
plot(mpg ~ log(hp), mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon")
plot(log(mpg) ~ log(hp), mtcars, xlab = "Gross horsepower (log-transformed)",
ylab = "Miles/(US) gallon (log-transformed)")
```
---
class: center middle inverse
# Polynomials
---
Introducing polynomials to a linear regression means including additional predictor(s) at power of $h$:
$Y = \alpha + \beta_{1} x  + ... + \beta_{h} x^h + \varepsilon,$
where $h$ is called the degree of polynomial. For a quadratic relationship $k = 2$ and for a cubic relationship $k = 3$.
---
Let's try to solve the problem now with polynomial regression.
``` {r}
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
```
--
There seems to be a quadratic relationship.
---
$$\text{mpg} = \alpha + \beta_1 \text{hp} + \beta_2 \text{hp}^2+ \varepsilon$$
``` {r}
Formula <- mpg ~ hp + I(hp^2)
Model <- lm(Formula, mtcars)
summary(Model)
```
---
Interpretation:
$$\text{mpg} = `r Model$coef[[1]]` + `r Model$coef[[2]]` \text{hp} + `r Model$coef[[3]]` \text{hp}^2 + \varepsilon$$
We can't really interpret the coefficients for $hp$ and $hp^2$ anymore.
???
Trade off between description or prediction.
---
Diagnostics
``` {r}
Params();par(mfrow = 1:2)
plot(Model, 1:2)
```
---
Why is the fit that good?
``` {r}
Params(); par(mar = c(4,4,0,0))
plot(mpg ~ hp, mtcars, xlab = "Gross horsepower",
ylab = "Miles/(US) gallon")
curve(predict(Model, list(hp = x)), min(mtcars$hp), max(mtcars$hp),
add = T, col = Col['red'])
```
???
Still linear in parameters!
---
What if the relationship is more complex? What if a regression line with two curves seems to fit best?
``` {r}
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
```
---
Let's try to fit a 3rd degree polynomial, i.e. model the relationship as cubic.
$$\text{disp} = \alpha + \beta_1 \text{wt} + \beta_2 \text{wt}^2 + \beta_3 \text{wt}^3 + \varepsilon$$
``` {r}
Formula <- disp ~ wt + I(wt^2) + I(wt^3)
Model <- lm(Formula, mtcars)
summary(Model)
```
---
Diagnostics
``` {r}
Params();par(mfrow = 1:2)
plot(Model, 1:2)
```
---
``` {r}
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
```
---
Is the polynomial model statistically significantly better than a model without polynomials?
``` {r}
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
abline(lm(disp ~ wt)), col = Col['blue'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
abline(lm(disp ~ wt)), col = Col['blue'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
abline(lm(disp ~ wt, mtcars), col = Col['blue'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
Formula <- disp ~ wt + I(wt^2) + I(wt^3)
Model <- lm(Formula, mtcars)
summary(Model)
Params();par(mfrow = 1:2)
plot(Model, 1:2)
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
abline(lm(disp ~ wt, mtcars), col = Col['blue'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2, lwd = 2)
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
abline(lm(disp ~ wt, mtcars), col = Col['blue'])
Params(); par(mar = c(4,4,0,0), mfrow = 1:2)
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
abline(lm(disp ~ wt, mtcars), col = Col['blue'])
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
abline(lm(disp ~ wt, mtcars), col = Col['blue'])
Params(); par(mar = c(4,4,0,0))
plot(disp ~ wt, mtcars, xlab = "Displacement (cu.in.)",
ylab = "	Weight (1000 lbs)")
curve(predict(Model, list(wt = x)), min(mtcars$wt), max(mtcars$wt),
add = T, col = Col['red'])
abline(lm(disp ~ wt, mtcars), col = Col['blue'])
anova(lm(disp ~ wt, mtcars),
lm(disp ~ wt + I(wt^2) + I(wt^3), mtcars))
Params();par(mfrow = 1:2)
plot(Model, 1:2)
Params();par(mfrow = 1:2)
plot(Model, 2:1)
Params(); par(mar = c(4,4,0,0))
plot(Formula, mtcars, xlab = "Gross horsepower", ylab = "Miles/(US) gallon")
